   call pathogen#infect() 

set shell=/bin/sh
set nocompatible

" Bundles for the vim plugins
" Bundle: git://git.wincent.com/command-t.git
" BundleCommand: cd ~/.vim/bundle/command-t && rake make
" Bundle: git://github.com/mileszs/ack.vim.git
" Bundle: git://github.com/firat/vim-bufexplorer.git
" Bundle: git://github.com/tpope/vim-rails.git
" Bundle: git://github.com/tpope/vim-git.git
" Bundle: git://github.com/tpope/vim-fugitive.git
" Bundle: git://github.com/scrooloose/nerdcommenter.git
" Bundle: git://github.com/wycats/nerdtree.git
" Bundle: git://github.com/pangloss/vim-javascript.git
" Bundle: git://github.com/msanders/snipmate.vim.git
" Bundle: git://github.com/ervandew/supertab.git
" Bundle: git://github.com/hallettj/jslint.vim.git
" BundleCommand: cd ~/.vim/bundle/jslint.vim && rake install

colorscheme desert

" Leader setting
let mapleader = ","

set number
set ruler
syntax on

" Set encoding
set encoding=utf-8

" Whitespace stuff
set wrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Searching
"set hlsearch
"set incsearch
"set ignorecase
"set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/plugins/*,temp_gems/*,

" Status bar
set laststatus=2



" Command-T configuration
let g:CommandTMaxHeight=20


" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>


" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" Use modeline overrides
set modeline
set modelines=10

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup


" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Jumping between windows
map <C-H> <C-W><C-H>
map <C-L> <C-W><C-L>
map <C-J> <C-W><C-J>
map <C-K> <C-W><C-K>

map <leader>n :bn
map <leader>p :bp
map <C-S-X>  "+y

" Vertical split right and split below
set splitright
set splitbelow

" Open files with <leader>f
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>

" Open files, limited to the directory of the current file, with <leader>gf
" This requires the %% mapping found below.
map <leader>gf :CommandTFlush<cr>\|:CommandT %%<cr>

" Open files limited to a specific rails-path
map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gp :CommandTFlush<cr>\|:CommandT public<cr>
map <leader>gs :CommandTFlush<cr>\|:CommandT spec<cr>

" Starts the current spec
map <leader>r :!rspec %<cr>


" NERDTree - toggle
" Open the current buffer in the NERDTree
map <C-N> :NERDTreeFind<cr>
map <F2> :NERDTree<CR>
let NERDTreeIgnore=['\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

" ctags tags file generation for the current directory
map <F8> :!ctags -R .<CR>


" ack grep
let g:ackprg="ack-grep -H --nocolor --nogroup --column"


" Buff Explorere
map <leader>b :BufExplorer<CR>
map <leader><F12> :BufExplorer<CR>
let g:bufExplorerSortBy='mru'


" set line limit bar
let g:JSLintHighlightErrorLine = 0 
" VIM 7.3+ has support for highlighting a specified column.
if exists('+colorcolumn')
    set colorcolumn=100
else
    " Emulate
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%85v.\+', -1)
endif

" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
